method:
  id: embeddr
  name: Embeddr
  source: tool
  platform: R
  url: https://github.com/kieranrcampbell/embeddr
  license: GPL-3
  authors:
  - given: Kieran
    family: Campbell
    email: kicampbell@bccrc.ca
    github: kieranrcampbell

manuscript:
  doi: '10.1101/027219'
  google_scholar_cluster_id: '5302171132481221018'
  preprint_date: '2015-09-18'

container:
  url: https://github.com/dynverse/ti_embeddr
  docker: dynverse/ti_embeddr

wrapper:
  type: linear_trajectory
  topology_inference: fixed
  trajectory_types: linear
  input_required: expression

parameters:
  - id: ndim
    type: integer
    default: 2
    distribution:
      type: uniform
      lower: 2
      upper: 10
    description: Dimension of the embedded space, default is 2
  - id: kernel
    type: character
    default: nn
    values:
    - nn
    - dist
    - heat
    description: |-
      The choice of kernel. 'nn' will give nearest neighbours, 'dist' gives minimum distance and
      'heat' gives a heat kernel. Discussed in detail in 'Laplacian Eigenmaps and Spectral Techniques for Embedding and Clustering',
      Belkin & Niyogi
  - id: metric
    type: character
    default: correlation
    values:
    - correlation
    - euclidean
    - cosine
    description: |-
      The metric with which to assess 'closeness' for nearest neighbour selection, one of
      'correlation' (pearson) or 'euclidean'. Default is 'correlation'.
  - id: nn_pct
    type: numeric
    default: 0
    distribution:
      type: uniform
      lower: -2
      upper: 1
    description: The percentage of cells to use as tge number of nearest neighbours
      if kernel == 'nn'.
  - id: eps
    type: numeric
    default: 0
    distribution:
      type: uniform
      lower: -5
      upper: 5
    description: Maximum distance parameter if kernel == 'dist'
  - id: t
    type: numeric
    default: 0
    distribution:
      type: uniform
      upper: 5
      lower: -5
    description: '"time" for heat kernel if kernel == "heat"'
  - id: symmetrize
    type: character
    default: mean
    values:
    - mean
    - ceil
    - floor
    description: |-
      How to make the adjacency matrix symmetric. Note that slightly
      counterintuitively, node i having node j as a nearest neighbour doesn't guarantee node
      j has node i. There are several ways to get round this;
      
      * `mean` If the above case occurs make the link weight 0.5 so the adjacency matrix becomes $0.5(A + A')$
      * `ceil` If the above case occurs set the link weight to 1 (ie take the ceiling of the mean case)
      * `floor` If the above case occurs set the link weight to 0 (ie take the floor of the mean case)
  - id: measure_type
    type: character
    default: unorm
    values:
    - unorm
    - norm
    description: |-
      Type of laplacian eigenmap, which corresponds to the constraint on the eigenvalue problem. If
      type is 'unorm' (default), then the graph measure used is the identity matrix, while if type is 'norm' then the measure
      used is the degree matrix.
  - id: thresh
    type: numeric
    default: 0.001
    distribution:
      type: expuniform
      lower: 1.0e-05
      upper: 100000
    description: convergence threshold on shortest distances to the curve.
  - id: maxit
    type: integer
    default: 10
    distribution:
      type: uniform
      lower: 0
      upper: 50
    description: maximum number of iterations.
  - id: stretch
    type: numeric
    default: 2
    distribution:
      type: uniform
      lower: 0
      upper: 5
    description: A factor by which the curve can be extrapolated when points are projected.  Default is 2 (times the last segment length). The default is 0 for `smoother` equal to `"periodic_lowess"`.
  - id: smoother
    type: character
    default: smooth.spline
    values:
    - smooth.spline
    - lowess
    - periodic.lowess
    description: |-
      Choice of smoother. The default is `"smooth_spline"`, and other choices are `"lowess"` and `"periodic_lowess"`. The latter allows one to fit closed curves. Beware, you may want to use `iter = 0` with `lowess()`.


